{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGift.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","GifGridItem","title","url","Card","style","width","className","Body","Title","Img","variant","src","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGift","Container","Row","Col","md","sx","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mPAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGXC,mBAAS,IAHE,mBAGxCC,EAHwC,KAG5BC,EAH4B,KAmB9C,OAEI,0BAAMC,SAZU,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAQ,OAAKP,GAAL,mBAAmBO,OAC1CN,EAAc,OAQZ,2BACKO,KAAK,OACLC,MAAQT,EACRU,SApBgB,SAAEP,GAC1BF,EAAcE,EAAEQ,OAAOF,Y,QCPhBG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEjC,OAEI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWC,UAAU,qCAC3C,kBAACH,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,MAAN,KAAcP,IAElB,kBAACE,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMC,IAAMT,M,gDCTzBU,EAAO,uCAAG,WAAOjB,GAAP,uBAAAkB,EAAA,6DACbX,EADa,0FAC6EY,UAAUnB,GADvF,sBAEAoB,MAAOb,GAFP,cAEbc,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAM,IAAD,EACvB,MAAM,CACFC,GAAID,EAAIC,GACRrB,MAAOoB,EAAIpB,MACXC,IAAG,UAAEmB,EAAIE,cAAN,aAAE,EAAYC,iBAAiBtB,QATxB,kBAYZiB,GAZY,4CAAH,sDCIPM,EAAU,SAAC,GAAoB,IAAD,ECHf,SAAE9B,GAE1B,IAFwC,EAOdR,mBALL,CACjB+B,KAAK,GACLQ,SAAQ,IAJ4B,mBAOjCC,EAPiC,KAO1BC,EAP0B,KAiBxC,OAPAC,qBAAU,WACNjB,EAAQjB,GAAUmC,MAAK,SAAAT,GAAG,OAAEO,EAAS,CACjCV,KAAKG,EACLK,SAAQ,SAEd,CAAC/B,IAEIgC,EDZiBI,CAFe,EAAhBpC,UAEhB+B,EAFgC,EAEhCA,QAASR,EAFuB,EAEvBA,KAEhB,OACI,oCACEQ,GAAW,yCACb,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACEf,EAAKE,KAAI,SAAAC,GAAG,OACV,kBAACa,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,IAAMhB,EAAIC,IAC5B,kBAAC,EACaD,WEblBiB,EAAe,WAAO,IAAD,EAEEnD,mBAAS,CAAC,cAFZ,mBAE3BoD,EAF2B,KAEfrD,EAFe,KAK9B,OACI,oCACA,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQqD,EAAWnB,KAAK,SAAAzB,GAAQ,OACxB,kBAAC,EAAD,CAAS0C,IAAM1C,EACbA,SAAWA,U,MCd7B6C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.71bc86a6.chunk.js","sourcesContent":["import React,{ useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n\n   const [inputValue, setinputValue] = useState('');\n\n   const onchangeInputValue = ( e ) =>{\n      setinputValue(e.target.value);\n   }\n\n   const handleSubmit = (e) =>{\n     e.preventDefault();\n\n     if( inputValue.trim().length > 2){\n       setCategories( category=>[  inputValue,...category ] );\n       setinputValue('');\n     }\n\n   }\n\n    return (\n        \n        <form onSubmit={ handleSubmit }>\n         <input \n              type=\"text\"\n              value={ inputValue }\n              onChange={ onchangeInputValue } \n              />\n         </form>\n        \n    )\n  \n}\n\nAddCategory.propTypes = {\n  setCategories : PropTypes.func.isRequired\n}\n","import React from 'react';\n// import Card from 'react-bootstrap/Card';\nimport {Card} from 'react-bootstrap';\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        \n        <Card style={{ width: '18rem' }} className=\"animate__animated animate__fadeIn\">\n        <Card.Body>\n            <Card.Title>{ title }</Card.Title>\n        </Card.Body>\n        <Card.Img variant=\"top\" src={ url } />\n        </Card>\n    )\n}\n","\n\nexport const getGifs = async( category )=>{\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=PCQSWdSXMaf9NN9KOIRZOVb9kwgp9pwA&q=${ encodeURI(category) }&limit=10`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img=>{\n         return{\n             id: img.id,\n             title: img.title,\n             url: img.images?.downsized_medium.url\n         }\n    });\n    return gifs;\n\n}","import React from 'react';\nimport { GifGridItem } from './GifGridItem';\nimport {Container,Row,Col} from 'react-bootstrap'\nimport { useFetchGift } from '../hooks/useFetchGift';\n\n\nexport const GifGrid = ( { category } ) => {\n   \n    const {loading, data} = useFetchGift(category);\n   \n    return (\n        <>\n        { loading && <p>Loading...</p> }\n        <Container>\n            <Row>\n            { data.map(img=>(\n                <Col md={4} sx={6} key={ img.id }>\n                 <GifGridItem \n                          { ...img }/>\n                </Col>\n               )) }\n               \n           </Row>\n        </Container>\n        </>\n    )\n}\n","import { useState,useEffect }from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGift = ( category ) => {\n\n    const initialState = {\n        data:[],\n        loading:true\n    }\n\n    const [state, setState] = useState(initialState);\n\n\n    useEffect(()=>{\n        getGifs(category).then(img=>setState({\n            data:img,\n            loading:false\n        }))\n    },[category]);\n\n    return state;\n\n}\n","import React,{ useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = () => {\n\nconst [categories, setCategories] = useState(['One Punch']);\n\n\n    return (\n        <>\n        <h2> GifExpertApp </h2>\n        <AddCategory setCategories={setCategories} />        \n        <hr/>\n       \n        <ol>\n            {\n                categories.map( category => (\n                <GifGrid key={ category }\n                  category={ category } \n                />\n                ))\n            }\n        </ol>\n\n        </>\n\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}